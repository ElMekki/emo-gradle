
def srcDIR  = new File("d:/labs/tmp")
ext.distDIRSTR = "d:/labs/tmp/toRemove"
ext.livHOME = new File("D:/labs/sncf/20180126/livMOE/Sprint11")
def fileName="dir1.zip"

//
def loadProps() {
    def numSP = hasProperty('nsp') ? nsp : ''
    
    if(numSP?.trim()) {
        println "numero SPRINT $numSP"
        project.ext.set 'numSP', numSP
        project.ext.distDIR= new File(distDIRSTR, "SPRINT-$numSP")

        //
  

    } else {
        println "numero SPRINT inconnu!"
        throw new Error('num SPRINT inconnu')
    }

}

//
loadProps()

task clean() {
    delete distDIR
}

task unzip(dependsOn: clean, type: Copy) {
    def obj=getDeliveryInfo()
    def fileZip=obj.fileZip
    def version=obj.version
    def sprint=obj.sprint
    
    println "UNZIP file: $fileZip.name ; Numero SPRINT-Param: $numSP ; Version: $version; SPIRNT-LIV: $sprint"

   from zipTree(fileZip)
    eachFile {
        def newPath = it.relativePath.segments[1..-1].join("/")
        it.relativePath = RelativePath.parse(true, newPath)
    }
    into distDIR

    doLast {
        def dirToDelete = new File(distDIR,obj.fileZipNameWithoutExt)
        dirToDelete.deleteOnExit()
    }
}

def getDeliveryInfo() {
    def livFileName= fileTree(livHOME){include "**/*.zip"}
    assert 1 == livFileName.files.size()
    println "livFileName : $livFileName.files"
    def fileZip=livFileName.files[0]
    def fileZipName=fileZip.name
    def arr=fileZipName.split('-')[3]
    def version = arr.split('_')[0]
    def sprint =arr.split('_')[1].split('\\.')[0]
    def fileZipNameWithoutExt=fileZipName.lastIndexOf('.').with {it != -1 ? fileZipName[0..<it] : fileZipName}

    return [fileZip:fileZip,fileZipNameWithoutExt:fileZipNameWithoutExt, version:version, sprint:sprint]
}
